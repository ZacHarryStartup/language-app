name: Deploy Lambda Layer

on:
    workflow_dispatch:
        inputs:
          layerName:
            type: string
            description: "Name of Layer"
            required: true
            default: "Enter Layer Name"
          packageName:
            type: string
            description: "Name of Package to be Installed"
            required: true
            default: "Enter Package Name"
          lambdaFunctions:
            type: string
            description: "List of Lambda Functions to Use Layer"
            required: true
            default: "Enter List of Function Names E.g '[functionOne, functionTwo]'"
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ap-southeast-2
  github_token: ${{ secrets.GITHUB_TOKEN }}

jobs:
  deploy-layer:
    permissions:
      deployments: write
      contents: write
      statuses: write
      actions: write
      checks: read
    runs-on: ubuntu-latest
    environment: language-app
    steps:
      - name: checkout_repo
        uses: actions/checkout@v4 
      - name: test secrets
        run: |
          echo ${{ secrets.AWS_ACCESS_KEY_ID }}
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
      - name: Install dependencies
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install ${{ inputs.packageName }} -t ./lambda-layers/python

      - name: Zip the layer
        run: |
          cd lambda-layers
          zip -r9 ${{ inputs.packageName }}-layer.zip python

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Publish Lambda layer
        id: publish_layer
        run: |
          LAYER_VERSION_ARN=$(aws lambda publish-layer-version --layer-name ${{ inputs.layerName }} --zip-file fileb://lambda-layers/${{ inputs.packageName }}-layer.zip --compatible-runtimes python3.12 --output text --query LayerVersionArn)
          echo "LAYER_VERSION_ARN=${LAYER_VERSION_ARN}" >> $GITHUB_ENV

      - name: Attach layer to Lambda functions
        run: |
          # Parse JSON array of function names
          FUNCTION_NAMES=$(echo '${{ inputs.lambdaFunctions }}' | jq -r '.[]')
          for function_name in $FUNCTION_NAMES; do
          #   echo "Attaching layer to $function_name"
          #   echo "Attaching layers to $function_name: ${{ env.LAYER_VERSION_ARN }}"
          #   aws lambda update-function-configuration --function-name $function_name --layers ${{ env.LAYER_VERSION_ARN }}
          # done
            existing_layers=$(aws lambda get-function-configuration --function-name $function_name --query 'Layers[].Arn' --output text)
              if [ -z "$existing_layers" ]; then
                updated_layers="${LAYER_VERSION_ARN}"
              else
                updated_layers="${existing_layers} ${LAYER_VERSION_ARN}"
              fi
              # Remove potential duplicates
              unique_layers=$(echo $updated_layers | tr ' ' '\n' | sort -u | tr '\n' ' ')
              echo "Updating $function_name with layers: $unique_layers"
              aws lambda update-function-configuration --function-name $function_name --layers $unique_layers
          done